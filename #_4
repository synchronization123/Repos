import os
import pandas as pd
from datetime import datetime

# Create output folder if not exists
output_folder = "data/output"
os.makedirs(output_folder, exist_ok=True)

# Get all .xlsx files in current folder
xlsx_files = [f for f in os.listdir() if f.endswith(".xlsx")]

# Merge all Excel files
dataframes = []
for file in xlsx_files:
    df = pd.read_excel(file, dtype=str)  # Read as strings to avoid issues
    dataframes.append(df)

merged_df = pd.concat(dataframes, ignore_index=True)

# Ensure required columns exist
required_columns = ["Date", "Issue key", "Issue Type", "Version", "Assigned to", "Status",
                    "Assigned On", "Analyst Comments", "Mentor review", "Feedback", "Security"]

for col in required_columns:
    if col not in merged_df.columns:
        merged_df[col] = ""

# Update Issue Type where Security column has value
merged_df.loc[merged_df["Security"].str.contains("Security", na=False), "Issue Type"] = "Security"

# Concatenate Issue Type and Security into a new column "Issue Types"
merged_df["Issue Types"] = merged_df["Issue Type"].astype(str) + " " + merged_df["Security"].astype(str)
merged_df["Issue Types"] = merged_df["Issue Types"].str.strip()  # Remove extra spaces

# Drop the old Issue Type and Security column
merged_df.drop(columns=["Issue Type", "Security"], inplace=True)

# Rename "Bug Security" â†’ "Security" in Issue Types
merged_df["Issue Types"] = merged_df["Issue Types"].replace("Bug Security", "Security")

# Prompt user for assigning users per Issue Type
issue_types = merged_df["Issue Types"].unique()
user_assignments = {}

for issue_type in issue_types:
    users = input(f"Enter comma-separated users for Issue Type '{issue_type}': ").split(',')
    users = [u.strip() for u in users if u.strip()]
    user_assignments[issue_type] = users

# Function to assign users sequentially with a max of 30 per user
def assign_users(issue_type):
    users = user_assignments.get(issue_type, ["Unassigned"])
    num_users = len(users)
    if num_users == 0:
        return "Unassigned"

    assigned_users = []
    for i, _ in enumerate(merged_df[merged_df["Issue Types"] == issue_type].index):
        assigned_users.append(users[i % num_users])  # Round-robin assignment

    return assigned_users

# Apply user assignment
for issue_type in issue_types:
    indices = merged_df[merged_df["Issue Types"] == issue_type].index
    assigned_users = assign_users(issue_type)
    merged_df.loc[indices, "Assigned to"] = assigned_users

# Ensure Assigned to column has unique names (clean)
merged_df["Assigned to"] = merged_df["Assigned to"].apply(lambda x: ", ".join(set(str(x).split(','))) if isinstance(x, str) else x)

# Set current date
current_date = datetime.now().strftime("%d-%b-%Y")
merged_df["Date"] = current_date
merged_df["Assigned On"] = current_date

# Select relevant columns in final order
final_columns = ["Date", "Issue key", "Issue Types", "Version", "Assigned to", "Status",
                 "Assigned On", "Analyst Comments", "Mentor review", "Feedback"]
merged_df = merged_df[final_columns]

# Split into Develop and Non-Develop
develop_data = merged_df[merged_df["Version"].str.contains("develop", case=False, na=False)]
non_develop_data = merged_df[~merged_df["Version"].str.contains("develop", case=False, na=False)]

# Save output files
develop_filename = os.path.join(output_folder, f"Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx")
non_develop_filename = os.path.join(output_folder, f"Non_Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx")

develop_data.to_excel(develop_filename, index=False)
non_develop_data.to_excel(non_develop_filename, index=False)

# Delete all temporary files except Develop and Non-Develop files
for file in xlsx_files:
    if file not in [develop_filename, non_develop_filename]:
        os.remove(file)

print(f"Develop JIRAs saved to: {develop_filename}")
print(f"Non-Develop JIRAs saved to: {non_develop_filename}")