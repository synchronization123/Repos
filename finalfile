import pandas as pd
import os
from datetime import datetime

# Set the current date
current_date = datetime.now().strftime("%d-%b-%Y")

# Folder paths
input_folder = 'path/to/your/folder'  # Update with actual input folder path
output_folder = 'data/output'
final_folder = os.path.join(output_folder, "Final")

# Create required folders if they don't exist
for folder in [output_folder, final_folder]:
    if not os.path.exists(folder):
        os.makedirs(folder)

# Function to load all xlsx files from the folder
def load_xlsx_files(input_folder):
    files = [f for f in os.listdir(input_folder) if f.endswith('.xlsx')]
    return [pd.read_excel(os.path.join(input_folder, file)) for file in files]

# Load all Excel files and merge data
files = load_xlsx_files(input_folder)
merged_data = pd.concat(files, ignore_index=True)

# Concatenate 'Issue type' and 'Security' into 'Issue types'
merged_data['Issue types'] = merged_data['Issue type'].fillna('') + ' ' + merged_data['Security'].fillna('')
merged_data = merged_data.drop(columns=['Security', 'Issue type'])

# Replace "Security Bug" with "Security"
merged_data['Issue types'] = merged_data['Issue types'].replace({"Security Bug": "Security"})

# Create a summary by 'Issue types'
issue_type_summary = merged_data['Issue types'].value_counts()
print("Summary by Issue Type:")
print(issue_type_summary)

# Prompt user for assignments
assignments = {}
for issue_type in issue_type_summary.index.tolist():
    users = input(f"Enter users for issue type '{issue_type}' (comma separated): ").split(',')
    assignments[issue_type] = [user.strip() for user in users]

# Assign users to 'Assigned to' column
merged_data['Assigned to'] = merged_data['Issue types'].map(lambda issue: assignments.get(issue, []))

# Format columns
merged_data['Assigned On'] = current_date
merged_data['Date'] = current_date

final_columns = [
    'Date', 'Issue key', 'Issue types', 'Version', 'Assigned to', 'Status',
    'Assigned On', 'Analyst Comments', 'Mentor review', 'Feedback'
]
merged_data = merged_data[final_columns]

# Save merged data temporarily
merged_data_path = os.path.join(output_folder, f"Final_jiras_{current_date}.xlsx")
merged_data.to_excel(merged_data_path, index=False)

# Separate into Develop and Non-Develop files
develop_data = merged_data[merged_data['Version'].str.contains("develop", case=False, na=False)]
non_develop_data = merged_data[~merged_data['Version'].str.contains("develop", case=False, na=False)]

# Final file paths in 'Final' folder
develop_file_path = os.path.join(final_folder, f"Develop_jiras_{current_date}.xlsx")
non_develop_file_path = os.path.join(final_folder, f"Non_Develop_jiras_{current_date}.xlsx")

# Save Develop and Non-Develop files
develop_data.to_excel(develop_file_path, index=False)
non_develop_data.to_excel(non_develop_file_path, index=False)

print(f"Develop file saved: {develop_file_path}")
print(f"Non-Develop file saved: {non_develop_file_path}")

# Delete intermediate files except Develop and Non-Develop
intermediate_files = [
    merged_data_path, "Merged.xlsx", "Concatenate.xlsx"
]
for file in intermediate_files:
    file_path = os.path.join(output_folder, file)
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"Deleted: {file_path}")

# Final confirmation
print("Processing completed. Only Develop and Non-Develop Excel files are saved in the Final folder.")