import os
import pandas as pd
from datetime import datetime

# Ensure output folder exists
output_folder = "data/output"
os.makedirs(output_folder, exist_ok=True)

# Merge all Excel files in the folder
all_files = [f for f in os.listdir() if f.endswith(".xlsx")]

df_list = []
for file in all_files:
    df = pd.read_excel(file)
    df_list.append(df)

merged_df = pd.concat(df_list, ignore_index=True)

# Ensure required columns exist
required_columns = ["Issue Type", "Security", "Priority", "Version"]
for col in required_columns:
    if col not in merged_df.columns:
        merged_df[col] = ""

# Concatenate Security and Issue Type into a new column "Issue Types"
merged_df["Issue Types"] = merged_df.apply(
    lambda row: f"{row['Issue Type']} {row['Security']}".strip(), axis=1
)

# Rename specific Issue Types
merged_df["Issue Types"] = merged_df["Issue Types"].replace({
    "Bug Security": "Security",
    "Improvement-Technical Security": "Security",
    "Bug": "Functional bug"
})

# Append "High (P1)" to Issue Types if Priority is High (P1)
merged_df["Issue Types"] = merged_df.apply(
    lambda row: f"{row['Issue Types']} High (P1)" if row["Priority"] == "High (P1)" else row["Issue Types"], axis=1
)

# Drop unnecessary columns
merged_df.drop(columns=["Issue Type", "Security"], inplace=True)

# Prompt user for names to assign issues
unique_issue_types = merged_df["Issue Types"].unique()
user_assignments = {}

for issue_type in unique_issue_types:
    count = merged_df[merged_df["Issue Types"] == issue_type].shape[0]
    required_users = max(1, count // 30)
    users = input(f"Enter {required_users} comma-separated users for {issue_type} (Total: {count}): ").split(",")
    
    users = [u.strip() for u in users if u.strip()]
    user_assignments[issue_type] = users

# Assign users sequentially in batches of 30
def assign_users(issue_type):
    users = user_assignments.get(issue_type, ["Unknown"])
    assigned_users = []
    for i in range(len(merged_df[merged_df["Issue Types"] == issue_type])):
        assigned_users.append(users[i // 30 % len(users)])  # Assign sequentially in batches of 30
    return assigned_users

merged_df["Assigned To"] = merged_df["Issue Types"].apply(assign_users)

# Flatten lists in "Assigned To"
merged_df = merged_df.explode("Assigned To", ignore_index=True)

# Add formatted dates
current_date = datetime.now().strftime("%d-%b-%Y")
merged_df["Date"] = current_date
merged_df["Assigned On"] = current_date

# Define final column order
final_columns = ["Date", "Issue Key", "Issue Types", "Version", "Assigned To", "Status",
                 "Assigned On", "Analyst Comments", "Mentor review", "Feedback"]
merged_df = merged_df[final_columns]

# Split into develop and non-develop
develop_df = merged_df[merged_df["Version"].str.contains("develop", na=False, case=False)]
non_develop_df = merged_df[~merged_df["Version"].str.contains("develop", na=False, case=False)]

# Remove blank version rows from non-develop
non_develop_df = non_develop_df[non_develop_df["Version"].notna() & (non_develop_df["Version"] != "")]

# Save output files
develop_filename = os.path.join(output_folder, f"Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx")
non_develop_filename = os.path.join(output_folder, f"Non_Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx")

develop_df.to_excel(develop_filename, index=False)
non_develop_df.to_excel(non_develop_filename, index=False)

# Summary by Version and Issue Type
summary = merged_df.groupby(["Version", "Issue Types"]).size().reset_index(name="Count")
print("\nSummary by Version and Issue Type:\n")
print(summary)

# Summary by Assigned To
summary_assigned = merged_df.groupby("Assigned To").size().reset_index(name="Count")
print("\nSummary by Assigned To:\n")
print(summary_assigned)

# Cleanup intermediate files
for file in all_files:
    if not (file.endswith("Develop_jiras.xlsx") or file.endswith("Non_Develop_jiras.xlsx")):
        os.remove(file)

print("\nâœ… Process Completed. Develop & Non-Develop JIRAs saved successfully!")