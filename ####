import os
import pandas as pd
from datetime import datetime
from collections import deque

# Ensure output folder exists
output_folder = "data/output"
os.makedirs(output_folder, exist_ok=True)

# Get today's date in required format
today_date = datetime.today().strftime("%d-%b-%Y")
file_date = datetime.today().strftime("%Y-%m-%d")

# Step 1: Merge all Excel files
files = [f for f in os.listdir() if f.endswith(".xlsx") and not f.startswith("~$")]
df_list = [pd.read_excel(f, dtype=str) for f in files]
merged_df = pd.concat(df_list, ignore_index=True)

# Save Merged File
merged_file = os.path.join(output_folder, "merged.xlsx")
merged_df.to_excel(merged_file, index=False)

# Ensure required columns exist
required_columns = ["Date", "Issue Key", "Issue Type", "Version", "Assigned To", 
                    "Status", "Assigned On", "Analyst Comments", "Mentor Review", "Feedback", "Security"]

for col in required_columns:
    if col not in merged_df.columns:
        merged_df[col] = ""

# Step 2: Concatenate `Issue Type` and `Security` into `Issue Types` and remove original columns
merged_df["Issue Types"] = merged_df["Issue Type"].fillna("") + " " + merged_df["Security"].fillna("")
merged_df["Issue Types"] = merged_df["Issue Types"].str.strip().replace({"Bug Security": "Security"})  # Fix naming
merged_df.drop(columns=["Issue Type", "Security"], inplace=True)

# Save Concatenated File
concatenated_file = os.path.join(output_folder, "concatenated.xlsx")
merged_df.to_excel(concatenated_file, index=False)

# Step 3: Display Issue Type Summary
print("\nSummary by Issue Type:")
issue_type_summary = merged_df["Issue Types"].value_counts().reset_index()
issue_type_summary.columns = ["Issue Type", "Count"]
print(issue_type_summary.to_string(index=False))

# Step 4: Calculate Users Needed and Prompt for User Assignment
issue_type_counts = merged_df["Issue Types"].value_counts()
user_assignments = {}

for issue_type, count in issue_type_counts.items():
    # Calculate the number of users needed (ceil division of total issues / 30 issues per user)
    num_users = (count + 29) // 30  # Round up division to ensure all issues are covered

    # Suggest number of users based on issues count
    print(f"\nFor issue type '{issue_type}', we need {num_users} user(s) to handle {count} issues.")
    users_input = input(f"Enter comma-separated users for issue type '{issue_type}' (up to {num_users} users): ")
    users = [u.strip() for u in users_input.split(",") if u.strip()]

    # If fewer users are entered than the required number, distribute the issues among the entered users
    if len(users) < num_users:
        print(f"Warning: You entered only {len(users)} users. The issues will be distributed equally among the {len(users)} users.")
    
    # Assign users to the issue type (sequentially among the entered users)
    user_assignments[issue_type] = users

# Step 5: Assign users in a sequential manner (30 per user) and distribute issues equally
assigned_users = []
user_queue = []

# Loop through users and assign 30 issues sequentially
for issue_type, users in user_assignments.items():
    num_issues = issue_type_counts[issue_type]  # Number of issues for this type
    issues_per_user = (num_issues + len(users) - 1) // len(users)  # Ensure distribution is as even as possible

    # Repeat users until all issues are assigned, distribute equally
    user_iter = iter(users)
    current_user = next(user_iter)

    for i in range(num_issues):
        assigned_users.append(current_user)
        if (i + 1) % issues_per_user == 0:
            try:
                current_user = next(user_iter)
            except StopIteration:
                break  # No more users to assign to

# Assign the users to the 'Assigned To' column
merged_df["Assigned To"] = assigned_users

# Step 6: Ensure correct versioning
merged_df["Version"] = merged_df["Version"].fillna("")

# Step 7: Split into Develop and Non-Develop
develop_df = merged_df[merged_df["Version"].str.contains("develop", case=False, na=False)].copy()
non_develop_df = merged_df[~merged_df["Version"].str.contains("develop", case=False, na=False)].copy()

# Remove blank version rows from non-develop
non_develop_df = non_develop_df[non_develop_df["Version"].str.strip() != ""]

# Arrange columns
column_order = ["Date", "Issue Key", "Issue Types", "Version", "Assigned To", 
                "Status", "Assigned On", "Analyst Comments", "Mentor Review", "Feedback"]

develop_df = develop_df[column_order]
non_develop_df = non_develop_df[column_order]

# Fill missing dates
develop_df["Date"] = today_date
develop_df["Assigned On"] = today_date
non_develop_df["Date"] = today_date
non_develop_df["Assigned On"] = today_date

# Step 8: Save Final Files
develop_file = os.path.join(output_folder, f"Develop_jiras_{file_date}.xlsx")
non_develop_file = os.path.join(output_folder, f"Non_Develop_jiras_{file_date}.xlsx")

develop_df.to_excel(develop_file, index=False)
non_develop_df.to_excel(non_develop_file, index=False)

# Step 9: Cleanup - Delete Intermediate Files
os.remove(merged_file)
os.remove(concatenated_file)

for f in files:
    os.remove(f)

# Step 10: Display Summary by Version and Assigned To
print("\nSummary by Version (Grouped by Issue Type):")
version_summary = merged_df.groupby(['Version', 'Issue Types']).size().reset_index(name='Count')
print(version_summary.to_string(index=False))

print("\nSummary by Assigned To:")
assigned_to_summary = merged_df["Assigned To"].value_counts().reset_index()
assigned_to_summary.columns = ["Assigned To", "Count"]
print(assigned_to_summary.to_string(index=False))

print("\nProcessing complete. Files saved:")
print(f"- {develop_file}")
print(f"- {non_develop_file}")