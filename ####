import os
import pandas as pd
from datetime import datetime

# Create output directory if it does not exist
output_dir = "data/output"
os.makedirs(output_dir, exist_ok=True)

# Step 1: Merge all .xlsx files in the folder into one DataFrame
all_files = [f for f in os.listdir() if f.endswith(".xlsx")]
merged_df = pd.concat([pd.read_excel(f) for f in all_files], ignore_index=True)

# Step 2: Rename Issue Types based on Security Column first
merged_df["Security"] = merged_df["Security"].fillna("")
merged_df["Issue Type"] = merged_df.apply(
    lambda row: "Security" if "Security" in row["Security"] else row["Issue Type"], axis=1
)

# Step 3: Standardize Issue Types
issue_type_mapping = {
    "Bug Security": "Security",
    "Improvement-Technical Security": "Security",
    "Bug": "Functional bug",
    "Story": "Epic Story"
}
merged_df["Issue Type"] = merged_df["Issue Type"].replace(issue_type_mapping)

# Step 4: Concatenate Issue Type & Security into a new column
merged_df["Issue Types"] = merged_df["Issue Type"].astype(str) + " " + merged_df["Security"].astype(str)
merged_df["Issue Types"] = merged_df["Issue Types"].str.strip()

# Step 5: Drop Security column
merged_df.drop(columns=["Security"], inplace=True)

# Step 6: Display summary by Issue Type
issue_summary = merged_df["Issue Types"].value_counts().reset_index()
issue_summary.columns = ["Issue Types", "Count"]
print("\nSummary by Issue Type:")
print(issue_summary)

# Step 7: Prompt user for names based on issue count
users_by_issue_type = {}
for issue_type in issue_summary["Issue Types"]:
    issue_count = issue_summary[issue_summary["Issue Types"] == issue_type]["Count"].values[0]
    suggested_users = max(1, issue_count // 30)
    users_input = input(f"Enter {suggested_users} comma-separated users for Issue Type '{issue_type}': ").strip()
    users_by_issue_type[issue_type] = users_input.split(",")

# Step 8: Assign users sequentially (not round-robin)
def assign_users(issue_type, count):
    users = users_by_issue_type.get(issue_type, [])
    assigned_users = []
    if users:
        for i in range(count):
            assigned_users.append(users[i // 30 % len(users)])
    return assigned_users

merged_df["Assigned To"] = merged_df.apply(lambda row: assign_users(row["Issue Types"], 1)[0], axis=1)

# Step 9: Split into Develop & Non-Develop files
develop_data = merged_df[merged_df["Version"].str.contains("develop", case=False, na=False)]
non_develop_data = merged_df[~merged_df["Version"].str.contains("develop", case=False, na=False)]

# Remove rows where Version is blank in Non-Develop
non_develop_data = non_develop_data[non_develop_data["Version"].notna()]

# Step 10: Set date formats
current_date = datetime.now().strftime("%d-%b-%Y")
merged_df["Date"] = current_date
merged_df["Assigned On"] = current_date

# Step 11: Arrange columns
final_columns = ["Date", "Issue Key", "Issue Types", "Version", "Assigned To", "Status",
                 "Assigned On", "Analyst Comments", "Mentor review", "Feedback"]

develop_data = develop_data[final_columns]
non_develop_data = non_develop_data[final_columns]

# Step 12: Save final outputs
develop_filename = os.path.join(output_dir, f"Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx")
non_develop_filename = os.path.join(output_dir, f"Non_Develop_jiras_{datetime.now().strftime('%Y-%m-%d')}.xlsx")

develop_data.to_excel(develop_filename, index=False)
non_develop_data.to_excel(non_develop_filename, index=False)

# Step 13: Cleanup unnecessary files
for file in all_files:
    if not file.startswith("Develop_jiras") and not file.startswith("Non_Develop_jiras"):
        os.remove(file)

print("\nâœ… Process Completed. Files saved in 'data/output' folder.")