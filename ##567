import pandas as pd
import os
from datetime import datetime

# Set the current date
current_date = datetime.now().strftime("%d-%b-%Y")

# Folder paths
current_folder = os.getcwd()  # Current working directory

# Create output folder if it doesn't exist
output_folder = current_folder  # Saving in the same folder as the script
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Function to load all xlsx files from the current folder
def load_xlsx_files(current_folder):
    files = [f for f in os.listdir(current_folder) if f.endswith('.xlsx')]
    return [pd.read_excel(os.path.join(current_folder, file)) for file in files]

# Load all Excel files
files = load_xlsx_files(current_folder)

# Merge all data
merged_data = pd.concat(files, ignore_index=True)

# Add missing columns if not present
missing_columns = ['Analyst Comments', 'Mentor review', 'Feedback']
for col in missing_columns:
    if col not in merged_data.columns:
        merged_data[col] = ""

# Concatenate 'Issue type' and 'Security' columns into 'Issue types' and then drop the 'Security' and 'Issue type' columns
merged_data['Issue types'] = merged_data['Issue type'].fillna('') + ' ' + merged_data['Security'].fillna('')
merged_data = merged_data.drop(columns=['Security', 'Issue type'])

# Handle Issue type transformations
merged_data['Issue types'] = merged_data['Issue types'].replace({"Security Bug": "Security"})  # Rename "Security Bug" to "Security"

# Create a summary by 'Issue types'
issue_type_summary = merged_data['Issue types'].value_counts()

# Print the summary
print("Summary by Issue Type:")
print(issue_type_summary)

# Prompt user for users to assign to each issue type
issue_types = issue_type_summary.index.tolist()
assignments = {}

for issue_type in issue_types:
    users = input(f"Enter users for issue type '{issue_type}' (comma separated): ").split(',')
    assignments[issue_type] = [user.strip() for user in users]

# Function to assign users to issues
def assign_users_to_issues(issue_type, assignments):
    users = assignments.get(issue_type, [])
    user_count = len(users)
    return users * (30 // user_count) if user_count > 0 else []

# Assign users to 'Assigned to' column (in round-robin manner)
merged_data['Assigned to'] = merged_data['Issue types'].map(lambda issue: assign_users_to_issues(issue, assignments))

# Ensure no duplicate names in 'Assigned to' and assign users round-robin
merged_data['Assigned to'] = merged_data['Assigned to'].apply(lambda x: ', '.join(sorted(set(x.split(', ')))))

# Format columns as per the requested order
merged_data['Assigned On'] = current_date
merged_data['Date'] = current_date

final_columns = [
    'Date', 'Issue key', 'Issue types', 'Version', 'Assigned to', 'Status', 
    'Assigned On', 'Analyst Comments', 'Mentor review', 'Feedback'
]
merged_data = merged_data[final_columns]

# Save merged data as Final_jiras_yyyy-mm-dd.xlsx
merged_data_path = os.path.join(output_folder, f"Final_jiras_{current_date}.xlsx")
merged_data.to_excel(merged_data_path, index=False)
print(f"Final merged file saved: {merged_data_path}")

# Separate into Develop and Non-Develop sheets based on 'Version' column
develop_data = merged_data[merged_data['Version'].str.contains("develop", case=False, na=False)]
non_develop_data = merged_data[~merged_data['Version'].str.contains("develop", case=False, na=False)]

# Ensure no duplicates in 'Assigned to' column
develop_data['Assigned to'] = develop_data['Assigned to'].apply(lambda x: ', '.join(sorted(set(x.split(', ')))))
non_develop_data['Assigned to'] = non_develop_data['Assigned to'].apply(lambda x: ', '.join(sorted(set(x.split(', ')))))

# Save Develop and Non-Develop files
develop_file_path = os.path.join(output_folder, f"Develop_jiras_{current_date}.xlsx")
non_develop_file_path = os.path.join(output_folder, f"Non_Develop_jiras_{current_date}.xlsx")
develop_data.to_excel(develop_file_path, index=False)
non_develop_data.to_excel(non_develop_file_path, index=False)

print(f"Develop file saved: {develop_file_path}")
print(f"Non-Develop file saved: {non_develop_file_path}")

# Delete intermediate files except Develop and Non-Develop
intermediate_files = [
    "Merged.xlsx", "Concatenate.xlsx", f"Final_jiras_{current_date}.xlsx"
]
for file in intermediate_files:
    file_path = os.path.join(output_folder, file)
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"Deleted: {file_path}")

# Rename "Security Bug" to "Security" in 'Develop' and 'Non-Develop' output files
develop_data['Issue types'] = develop_data['Issue types'].replace({"Security Bug": "Security"})
non_develop_data['Issue types'] = non_develop_data['Issue types'].replace({"Security Bug": "Security"})

# Save the final Develop and Non-Develop files after renaming
develop_data.to_excel(develop_file_path, index=False)
non_develop_data.to_excel(non_develop_file_path, index=False)

print(f"Final Develop file after rename: {develop_file_path}")
print(f"Final Non-Develop file after rename: {non_develop_file_path}")