import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import requests
from io import StringIO
from openpyxl import load_workbook
from openpyxl.styles import Font
import threading
import urllib.parse

# Jira API URL and Token
JIRA_URL = "https://jira.crm.com/sr/jira.issueviews:searchrequest-csv-current-fields/temp/SearchRequest.csv?jqlQuery="
TOKEN = "djdjdjdjdjd"

# Function to fetch CSV data from Jira
def fetch_jira_data(jql_query, progress_callback):
    formatted_jql = urllib.parse.quote_plus(jql_query)  # Encode special characters
    url = f"{JIRA_URL}{formatted_jql}"
    
    headers = {"Authorization": f"Bearer {TOKEN}"}
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        return None, f"Error: {response.status_code} - {response.text}"
    
    csv_data = response.text
    df = pd.read_csv(StringIO(csv_data))
    
    progress_callback(100)
    return df, None

# Function to process and save data to Excel
def save_to_excel(df, filename, user_versions):
    filepath = f"{filename}.xlsx"

    # Normalize column names
    df.columns = df.columns.str.strip().str.lower()

    # Identify the correct "Component/s" column dynamically
    component_col = next((col for col in df.columns if "component" in col), None)
    if component_col is None:
        messagebox.showerror("Error", "Component/s column not found in Jira data!")
        return None

    # Extract required columns
    required_columns = ["summary", "key", "issuetype", "status", component_col, "qa verified version", "resolution", "invalid reason"]
    available_columns = [col for col in required_columns if col in df.columns]
    df = df[available_columns]

    # Identify Security vs. Functional Jira
    def classify_jira(components):
        if pd.isna(components):
            return "Functional Jira"
        component_list = str(components).lower().split(", ")
        return "Security Jira" if any(comp in ["security", "appsecurity"] for comp in component_list) else "Functional Jira"

    df["jira type"] = df[component_col].apply(classify_jira)

    # Standardize QA Verified Version field
    df["qa verified version"] = df["qa verified version"].fillna("").astype(str)

    # Save DataFrame to Excel
    df.to_excel(filepath, index=False)

    # Load workbook to apply formatting
    wb = load_workbook(filepath)
    ws = wb.active

    user_versions_set = set(v.strip() for v in user_versions.split(","))

    # Apply red font if none of the user-entered versions match the QA Verified Version field
    for row in ws.iter_rows(min_row=2, max_row=len(df)+1, min_col=2, max_col=2):
        for cell in row:
            issue_key = cell.value
            qvv_value = ws[f"F{cell.row}"].value.strip() if ws[f"F{cell.row}"].value else ""

            jira_qvv_set = set(qvv_value.split(",")) if qvv_value else set()
            
            # If no user-entered QVV matches Jira's QVV, highlight in red
            if not user_versions_set.intersection(jira_qvv_set):
                cell.font = Font(color="FF0000")  # Red color

    wb.save(filepath)
    return filepath

# Function to start data retrieval in a separate thread
def start_download():
    jql_query = jql_entry.get().strip()
    filename = filename_entry.get().strip()
    user_versions = qa_verified_entry.get().strip()

    if not filename or not jql_query or not user_versions:
        messagebox.showerror("Error", "Filename, JQL query, and QA Verified Versions are required!")
        return

    output_console.insert(tk.END, "Fetching Jira data...\n")
    
    def run():
        progress_bar["value"] = 0
        df, error = fetch_jira_data(jql_query, lambda val: progress_bar.config(value=val))
        
        if error:
            output_console.insert(tk.END, f"Error: {error}\n", "error")
            return
        
        filepath = save_to_excel(df, filename, user_versions)
        if filepath:
            output_console.insert(tk.END, f"File saved: {filepath}\n")
            progress_bar["value"] = 100

    threading.Thread(target=run, daemon=True).start()

# Create GUI
root = tk.Tk()
root.title("Jira Data Downloader")
root.geometry("400x400")

# Labels and Input Fields
tk.Label(root, text="Filename (without extension):").pack(pady=5)
filename_entry = tk.Entry(root, width=50)
filename_entry.pack(pady=5)

tk.Label(root, text="JQL Query (spaces will be replaced with '+')").pack(pady=5)
jql_entry = tk.Entry(root, width=50)
jql_entry.pack(pady=5)

tk.Label(root, text="QA Verified Versions (comma-separated):").pack(pady=5)
qa_verified_entry = tk.Entry(root, width=50)
qa_verified_entry.pack(pady=5)

# Progress Bar
progress_bar = ttk.Progressbar(root, orient="horizontal", length=300, mode="determinate")
progress_bar.pack(pady=10)

# Console Output
output_console = tk.Text(root, height=10, width=50)
output_console.pack(pady=5)

# Start Button
download_btn = tk.Button(root, text="Start", command=start_download)
download_btn.pack(pady=10)

root.mainloop()