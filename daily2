import pandas as pd
import requests
import datetime
import os
import io

# Constants
JIRA_URL = "https://jira.crm.com/sr/jira.issueviews:searchrequest-csv-all-fields/temp/SearchRequest.csv?jqlQuery="
API_TOKEN = "jdkdjdjjdd"
USERNAME_FILE = "usernames.xlsx"
OUTPUT_DIR = r"C:\Users\testser\Desktop\Data"
TODAY_DATE = datetime.datetime.today().strftime('%Y-%m-%d')
EXCEL_FILE = os.path.join(OUTPUT_DIR, f"date_{TODAY_DATE}.xlsx")

# Ensure output directory exists
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Read usernames from Excel (case-insensitive column check)
usernames_df = pd.read_excel(USERNAME_FILE, sheet_name=0)
usernames_column = [col for col in usernames_df.columns if col.lower() == "usernames"]
if not usernames_column:
    raise ValueError("Column 'Usernames' not found in usernames.xlsx")
usernames = usernames_df[usernames_column[0]].dropna().astype(str).str.strip().tolist()

# Convert to lowercase and filter out unwanted usernames
ignored_users = {"pull-request", "admin"}
usernames = [u for u in usernames if u.lower() not in ignored_users]

# Define JQL queries
JQL_QUERIES = {
    "FS Accepted": "status changed from 'Ready for testing' to 'Done' during ({date}) by {username}",
    "DS Accepted": "status changed from 'Ready for testing' to 'Ready for PA' during ({date}) by {username}",
}

# Function to fetch Jira data
def fetch_jira_data(jql):
    url = f"{JIRA_URL}{jql}"
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.content.decode('utf-8')
    else:
        print(f"Failed for JQL: {jql} | Status: {response.status_code}")
        return None

# Process each JQL query and store data in separate CSV files
csv_files = {}

for sheet_name, jql_template in JQL_QUERIES.items():
    all_data = []

    for username in usernames:
        jql = jql_template.format(date=TODAY_DATE, username=username)
        csv_data = fetch_jira_data(jql)

        if csv_data:
            df = pd.read_csv(io.StringIO(csv_data))
            all_data.append(df)

    # Save individual CSV if data exists
    if all_data:
        final_df = pd.concat(all_data, ignore_index=True)
        csv_filename = os.path.join(OUTPUT_DIR, f"{sheet_name}_{TODAY_DATE}.csv")
        final_df.to_csv(csv_filename, index=False)
        csv_files[sheet_name] = csv_filename
    else:
        print(f"No data found for {sheet_name}")

# Merge CSV files into Excel
with pd.ExcelWriter(EXCEL_FILE, engine="openpyxl") as writer:
    for sheet_name, csv_file in csv_files.items():
        df = pd.read_csv(csv_file)
        df.to_excel(writer, sheet_name=sheet_name, index=False)

print(f"CSV files saved in {OUTPUT_DIR}")
print(f"Merged Excel file saved as {EXCEL_FILE}")